// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  firstname   String
  lastname    String
  phone       String
  email       String       @unique
  password    String
  role        Role         @default(TRAVELLER)
  experiences Experience[]
  bookings    Booking[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Experience {
  id          String    @id @default(uuid())
  title       String
  description String
  location    String
  price       String
  imageUrl    String
  date        DateTime
  host        User      @relation(fields: [hostId], references: [id])
  hostId      String
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt
}

model Booking {
  id           String        @id @default(uuid())
  traveller    User          @relation(fields: [travellerId], references: [id])
  travellerId  String
  experience   Experience    @relation(fields: [experienceId], references: [id])
  experienceId String
  bookingDate  DateTime      @default(now())
  status       BookingStatus @default(PENDING)
  payment      Payment?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Payment {
  id                String        @id @default(uuid())
  amount            Float
  method            String
  booking           Booking       @relation(fields: [bookingId], references: [id])
  bookingId         String        @unique
  razorpayOrderId   String        @unique
  razorpayPaymentId String?
  razorpaySignature String?
  status            PaymentStatus @default(PENDING)
  paidAt            DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum Role {
  TRAVELLER
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
